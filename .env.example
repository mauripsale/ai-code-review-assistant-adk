# Code Review Assistant Configuration
# Copy this file to .env and update with your values.

# ============================================================================
# GOOGLE CLOUD CONFIGURATION (REQUIRED FOR CLOUD DEPLOYMENTS)
# ============================================================================

# Your Google Cloud Project ID.
GOOGLE_CLOUD_PROJECT=your-project-id

# Google Cloud region/location for deployments.
GOOGLE_CLOUD_LOCATION=us-central1

# ============================================================================
# CLOUD RUN - PRODUCTION DATABASE CONFIGURATION
# ============================================================================
# These variables are REQUIRED for the './deploy.sh cloud-run' command.
# If these are left blank, the script will offer to create a new Cloud SQL instance for you.

# The full name of your Cloud SQL instance.
CLOUD_SQL_INSTANCE_NAME=

# The username for the database.
DB_USER=

# The password for the database user. (For production, use Secret Manager).
DB_PASSWORD=

# The name of the database.
DB_NAME=

# ============================================================================
# AGENT ENGINE CONFIGURATION (OPTIONAL)
# ============================================================================
# This is ONLY used for the './deploy.sh agent-engine' command.

# The ID of your deployed Agent Engine. Leave blank for the first deployment.
AGENT_ENGINE_ID=

# Staging bucket for Agent Engine deployments (required for agent-engine)
# This is where your code is uploaded during deployment
STAGING_BUCKET=gs://your-project-staging

# ============================================================================
# ARTIFACT STORAGE CONFIGURATION
# ============================================================================
# GCS bucket for storing generated artifacts (reports, fixed code, etc.)
# If not set, defaults to 'code-review-assistant-artifacts'
ARTIFACT_BUCKET=code-review-assistant-artifacts

# ============================================================================
# MODEL CONFIGURATION
# ============================================================================

# Use Vertex AI (true) or Google AI Studio (false) for models.
GOOGLE_GENAI_USE_VERTEXAI=true

# API Key for Google AI Studio (only if GOOGLE_GENAI_USE_VERTEXAI=false).
GOOGLE_API_KEY=

# Model for fast analysis tasks.
WORKER_MODEL=gemini-2.5-flash

# Advanced model for nuanced feedback generation.
CRITIC_MODEL=gemini-2.5-pro

# ============================================================================
# APPLICATION & GRADING PARAMETERS
# ============================================================================

# Minimum score to pass (0.0-1.0).
PASSING_SCORE_THRESHOLD=0.8

# Weights for final grade calculation (must sum to 1.0).
STYLE_WEIGHT=0.3
TEST_WEIGHT=0.5
STRUCTURE_WEIGHT=0.2

# Maximum grading attempts per session.
MAX_GRADING_ATTEMPTS=3

# ============================================================================
# LOGGING & DEBUGGING
# ============================================================================

# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL.
LOG_LEVEL=INFO

# Enable debug mode with verbose output.
DEBUG_MODE=false

# ============================================================================
# NOTES ON DEPLOYMENT & SESSION PERSISTENCE
# ============================================================================

# This project has three distinct run/deployment modes, each with its own
# session handling method.

# 1. Local Development (`./deploy.sh local`):
#    - Uses a purely IN-MEMORY session service.
#    - State is EPHEMERAL and is completely lost when the server is stopped.
#    - Fastest option for quick, iterative testing. No cloud resources needed.

# 2. Cloud Run Production (`./deploy.sh cloud-run`):
#    - Deploys the agent as a stateless container on Cloud Run.
#    - Session state is PERSISTENT and stored in a Cloud SQL (PostgreSQL) database.
#    - Requires CLOUD_SQL_* variables to be set. The script will help you create
#      the database on the first run. This is the recommended production architecture
#      for a decoupled web service.

# 3. Agent Engine Deployment (`./deploy.sh agent-engine`):
#    - Deploys the agent to a fully managed, stateful service.
#    - Session state is PERSISTENT and automatically handled by the Agent Engine's
#      built-in VertexAiSessionService.
#    - Requires the AGENT_ENGINE_ID for updates. This is the simplest path to a
#      managed, stateful agent endpoint.
